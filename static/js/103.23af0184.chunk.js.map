{"version":3,"file":"static/js/103.23af0184.chunk.js","mappings":"+RAGaA,EAAgB,WAC3B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEMC,EAAAA,EAAAA,MAFN,OAEbC,EAFa,OAGnBN,GAAU,SAAAD,GAAM,wBAAQA,IAAR,OAAmBO,GAAnB,IAHG,gDAKnBC,QAAQC,IAAR,MALmB,yBAOnBN,GAAa,GAPM,4EAAH,qDAUpBE,GACD,GAAE,IAEI,CAAEL,OAAAA,EAAQE,UAAAA,EAClB,E,mBCnBYQ,EAAe,SAACC,EAAIC,GAC/B,OAAkCb,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOc,EAAP,KAAkBC,EAAlB,KACA,GAAkCf,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMW,EAAa,mCAAG,6GAEMH,EAAUD,GAFhB,OAEZE,EAFY,OAGlBC,EAAaD,GAHK,gDAKlBL,QAAQC,IAAR,MALkB,yBAOlBN,GAAa,GAPK,4EAAH,qDAUnBY,GACD,GAAE,CAACJ,EAAIC,IAED,CAAEC,UAAAA,EAAWX,UAAAA,EACrB,EAEDQ,EAAaM,WACVC,IAAAA,OAAAA,WAA6BA,IAAAA,KAAAA,Y,wBCpBnBC,EAAgB,WAC3B,OAA0BnB,EAAAA,EAAAA,UAAS,IAAnC,eAAOoB,EAAP,KAAcC,EAAd,KACA,GAA4BrB,EAAAA,EAAAA,WAAS,WAAO,IAAD,EACzC,iBAAOsB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBAA9C,QAA4D,EAC7D,IAFD,eAAOzB,EAAP,KAAeC,EAAf,KAGA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCuB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAxB,EAAAA,EAAAA,YAAU,WACRmB,OAAOC,aAAaK,QAAQ,SAAUR,KAAKS,UAAU9B,GACtD,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAKe,EAAL,CAGA,IAAMY,EAAU,mCAAG,oGAEf5B,GAAa,GAFE,UAGU6B,EAAAA,EAAAA,IAAgBb,GAH1B,OAIO,KADhBZ,EAHS,QAIJ0B,OACPC,EAAAA,OAAAA,QACE,gEAEFjC,GAAU,SAAAD,GAAM,wBAAQA,IAAR,OAAmBO,GAAnB,IARL,gDAUfC,QAAQC,IAAR,MAVe,yBAYfmB,EAAgB,CAAEO,MAAOhB,IACzBhB,GAAa,GAbE,4EAAH,qDAiBhB4B,GAlBC,CAmBF,GAAE,CAACZ,EAAOS,IAWX,MAAO,CAAE1B,UAAAA,EAAWF,OAAAA,EAAQ2B,aAAAA,EAAcS,SATzB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACdA,IAAelB,GACjBC,EAASiB,GACTpC,EAAU,KAEVmB,EAASiB,EAEZ,EAGF,C,2IChDYC,EAAWC,EAAAA,EAAAA,QAAH,qJAQRC,GAAaD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,ubAuBVG,EAAsBH,EAAAA,EAAAA,IAAH,qGAMnBI,EAAWJ,EAAAA,EAAAA,IAAH,kEAKRK,EAAYL,EAAAA,EAAAA,IAAH,mEAKTM,EAAaN,EAAAA,EAAAA,GAAH,kGAMVO,EAAiBP,EAAAA,EAAAA,GAAH,4CAIdQ,EAAgBR,EAAAA,EAAAA,EAAH,oEAKbS,GAAcT,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAH,qI,SCGxB,EAtDqB,SAAC,GAEf,IAAD,QADJW,MAASC,EACL,EADKA,YAAaC,EAClB,EADkBA,MAAOC,EACzB,EADyBA,aAAcC,EACvC,EADuCA,SAAUC,EACjD,EADiDA,OAG/CC,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAEzC,OACE,UAACrB,EAAD,YACE,SAACE,EAAD,CAAYoB,GAAIJ,EAAhB,sBACA,UAACd,EAAD,YACE,SAACC,EAAD,CACEkB,IAAG,6CAAwCV,GAC3CW,IAAKV,KAEP,UAACR,EAAD,YACE,SAACC,EAAD,UAAaO,KACb,SAACN,EAAD,0BACA,SAACC,EAAD,UAAgBM,EAAaU,QAAQ,MACrC,SAACjB,EAAD,wBACA,SAACC,EAAD,UAAgBO,KAChB,SAACR,EAAD,sBACA,SAACC,EAAD,UACGQ,EAAOS,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,eAI3C,4BACE,SAACpB,EAAD,+BACA,2BACE,yBACE,SAACE,EAAD,CAAaY,GAAG,OAAOF,MAAO,CAAEC,KAAMH,GAAtC,qBAIF,yBACE,SAACR,EAAD,CAAaY,GAAG,SAASF,MAAO,CAAEC,KAAMH,GAAxC,8BAQX,E,6BClCD,EAhBkB,WAChB,IAAQ7C,GAAOwD,EAAAA,EAAAA,MAAPxD,GACR,GAAiCD,EAAAA,EAAAA,IAAaC,EAAIyD,EAAAA,IAA1CvD,EAAR,EAAQA,UAER,OAFA,EAAmBX,WAECW,IAAc,CAAC,GACjC,SAACwD,EAAA,EAAD,KAEA,iCACE,SAAC,EAAD,CAAcnB,MAAOrC,KACrB,SAAC,EAAAyD,SAAD,CAAUC,UAAU,SAACF,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,kMCnBKG,EAAM,mCAENlE,EAAc,mCAAG,4FACT,mDADS,kBAGImE,EAAAA,EAAAA,IAAA,UAFb,mDAEa,oBAA4BD,EAA5B,YAHJ,uBAGXE,EAHW,EAGXA,KAHW,kBAIZA,EAAKC,SAJO,gCAMnBnE,QAAQoE,MAAM,iDANK,yDAAH,qDAUd5C,EAAe,mCAAG,WAAMb,GAAN,+EACV,4CADU,kBAGGsD,EAAAA,EAAAA,IAAA,UAFb,4CAEa,oBACHD,EADG,kBACUrD,EADV,YAHH,uBAGZuD,EAHY,EAGZA,KAHY,kBAMbA,EAAKC,SANQ,gCAQpBnE,QAAQoE,MAAM,8CARM,yDAAH,sDAYfR,EAAa,mCAAG,WAAMzD,GAAN,+EACR,sCADQ,kBAIK8D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB9D,EAAnB,oBAAiC6D,IAJtC,uBAIVE,EAJU,EAIVA,KAJU,kBAKXA,GALW,gCAOlBlE,QAAQoE,MAAM,oDAPI,yDAAH,sDAWbC,EAAe,mCAAG,WAAMlE,GAAN,+EACV,sCADU,kBAIG8D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB9D,EAAnB,4BAAyC6D,IAJ5C,uBAIZE,EAJY,EAIZA,KAJY,kBAKbA,GALa,gCAOpBlE,QAAQoE,MAAM,oDAPM,yDAAH,sDAWfE,EAAkB,mCAAG,WAAMnE,GAAN,+EACb,sCADa,kBAIA8D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB9D,EAAnB,4BAAyC6D,IAJzC,uBAIfE,EAJe,EAIfA,KAJe,kBAKhBA,GALgB,gCAOvBlE,QAAQoE,MAAM,oDAPS,yDAAH,qD","sources":["hooks/usefetchItems.jsx","hooks/useFetchMovie.jsx","hooks/useFetchQuery.jsx","components/MovieCardBox/MovieCardBox.styled.jsx","components/MovieCardBox/MovieCardBox.jsx","pages/MovieCard.jsx","services/api.jsx"],"sourcesContent":["import { fetchTrendData } from 'services/api';\nimport { useState, useEffect } from 'react';\n\nexport const useFetchItems = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const findTrendFilms = async () => {\n      try {\n        const moviesList = await fetchTrendData();\n        setMovies(movies => [...movies, ...moviesList]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findTrendFilms();\n  }, []);\n\n  return { movies, isLoading };\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const useFetchInfo = (id, fetchInfo) => {\n  const [movieInfo, setMovieInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const findMovieInfo = async () => {\n      try {\n        const movieInfo = await fetchInfo(id);\n        setMovieInfo(movieInfo);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findMovieInfo();\n  }, [id, fetchInfo]);\n\n  return { movieInfo, isLoading };\n};\n\nuseFetchInfo.propTypes =\n  (PropTypes.string.isRequired, PropTypes.func.isRequired);\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchData } from 'services/api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport const useFetchQuery = () => {\n  const [value, setValue] = useState('');\n  const [movies, setMovies] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('movies')) ?? [];\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    window.localStorage.setItem('movies', JSON.stringify(movies));\n  }, [movies]);\n\n  useEffect(() => {\n    if (!value) {\n      return;\n    }\n    const findMovies = async () => {\n      try {\n        setIsLoading(true);\n        const moviesList = await fetchSearchData(value);\n        moviesList.length === 0\n          ? Notify.failure(\n              'Sorry! There is no photo with this name. Try something else!'\n            )\n          : setMovies(movies => [...movies, ...moviesList]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setSearchParams({ query: value });\n        setIsLoading(false);\n      }\n    };\n\n    findMovies();\n  }, [value, setSearchParams]);\n\n  const addValue = ({ inputValue }) => {\n    if (inputValue !== value) {\n      setValue(inputValue);\n      setMovies([]);\n    } else {\n      setValue(inputValue);\n    }\n  };\n\n  return { isLoading, movies, searchParams, addValue };\n};\n","import styled from '@emotion/styled';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const MovieBox = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  border-bottom: 1px solid black;\n  padding-bottom: 10px;\n`;\n\nexport const GoBackLink = styled(Link)`\n  display: flex;\n  font-size: 12px;\n  width: 80px;\n  height: 30px;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  text-transform: uppercase;\n  font-weight: 700;\n  color: black;\n  border: black 1px solid;\n  margin-bottom: 20px;\n\n  &:hover,\n  &:focus {\n    color: white;\n    font-weight: 700;\n    background-color: red;\n    border: transparent 1px solid;\n  }\n`;\n\nexport const MovieDescriptionBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nexport const MovieImg = styled.img`\n  display: block;\n  margin-right: 20px;\n`;\n\nexport const MovieInfo = styled.div`\n  flex-grow: 2;\n  justify-content: flex;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-size: 38px;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n`;\n\nexport const MovieInfoTitle = styled.h3`\n  font-size: 32px;\n`;\n\nexport const MovieInfoText = styled.p`\n  font-size: 26px;\n  margin-bottom: 10px;\n`;\n\nexport const FeatureLink = styled(NavLink)`\n  color: black;\n  font-size: 26px;\n\n  &:hover,\n  &:focus {\n    color: red;\n    font-weight: 700;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  GoBackLink,\n  MovieBox,\n  MovieImg,\n  MovieDescriptionBox,\n  MovieInfo,\n  FeatureLink,\n  MovieTitle,\n  MovieInfoTitle,\n  MovieInfoText,\n} from './MovieCardBox.styled';\n\nconst MovieCardBox = ({\n  movie: { poster_path, title, vote_average, overview, genres },\n}) => {\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/movies';\n\n  return (\n    <MovieBox>\n      <GoBackLink to={backLink}>Go Back</GoBackLink>\n      <MovieDescriptionBox>\n        <MovieImg\n          src={`https://www.themoviedb.org/t/p/w500${poster_path}`}\n          alt={title}\n        />\n        <MovieInfo>\n          <MovieTitle>{title}</MovieTitle>\n          <MovieInfoTitle>User Score</MovieInfoTitle>\n          <MovieInfoText>{vote_average.toFixed(1)}</MovieInfoText>\n          <MovieInfoTitle>Overview</MovieInfoTitle>\n          <MovieInfoText>{overview}</MovieInfoText>\n          <MovieInfoTitle>Genres</MovieInfoTitle>\n          <MovieInfoText>\n            {genres.map(({ name }) => name).join(', ')}\n          </MovieInfoText>\n        </MovieInfo>\n      </MovieDescriptionBox>\n      <div>\n        <MovieInfoTitle>Additional info</MovieInfoTitle>\n        <ul>\n          <li>\n            <FeatureLink to=\"cast\" state={{ from: backLink }}>\n              Cast\n            </FeatureLink>\n          </li>\n          <li>\n            <FeatureLink to=\"review\" state={{ from: backLink }}>\n              Review\n            </FeatureLink>\n          </li>\n        </ul>\n      </div>\n    </MovieBox>\n  );\n};\n\nMovieCardBox.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.shape),\n  }),\n};\nexport default MovieCardBox;\n","import { useParams, Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport MovieCardBox from 'components/MovieCardBox';\nimport Loader from 'components/Loader';\nimport { useFetchInfo } from 'hooks';\nimport { fetchDataById } from 'services/api';\n\nconst MovieCard = () => {\n  const { id } = useParams();\n  const { movieInfo, isLoading } = useFetchInfo(id, fetchDataById);\n\n  return isLoading && movieInfo !== {} ? (\n    <Loader />\n  ) : (\n    <>\n      <MovieCardBox movie={movieInfo} />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieCard;\n","import axios from 'axios';\n\nconst KEY = 'fd7341fdf0f2e94a335192ece09ea376';\n\nconst fetchTrendData = async () => {\n  const url = 'https://api.themoviedb.org/3/trending/movie/week';\n  try {\n    const { data } = await axios.get(`${url}?api_key=${KEY}&page=1`);\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong! Can not get full trends' + error);\n  }\n};\n\nconst fetchSearchData = async value => {\n  const url = 'https://api.themoviedb.org/3/search/movie';\n  try {\n    const { data } = await axios.get(\n      `${url}?api_key=${KEY}&query=${value}&page=1`\n    );\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong! Can not search films' + error);\n  }\n};\n\nconst fetchDataById = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nconst fetchDataByCast = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}/credits?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nconst fetchDataByReviews = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}/reviews?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nexport {\n  fetchTrendData,\n  fetchSearchData,\n  fetchDataById,\n  fetchDataByCast,\n  fetchDataByReviews,\n};\n"],"names":["useFetchItems","useState","movies","setMovies","isLoading","setIsLoading","useEffect","findTrendFilms","fetchTrendData","moviesList","console","log","useFetchInfo","id","fetchInfo","movieInfo","setMovieInfo","findMovieInfo","propTypes","PropTypes","useFetchQuery","value","setValue","JSON","parse","window","localStorage","getItem","useSearchParams","searchParams","setSearchParams","setItem","stringify","findMovies","fetchSearchData","length","Notify","query","addValue","inputValue","MovieBox","styled","GoBackLink","Link","MovieDescriptionBox","MovieImg","MovieInfo","MovieTitle","MovieInfoTitle","MovieInfoText","FeatureLink","NavLink","movie","poster_path","title","vote_average","overview","genres","backLink","useLocation","state","from","to","src","alt","toFixed","map","name","join","useParams","fetchDataById","Loader","Suspense","fallback","KEY","axios","data","results","error","fetchDataByCast","fetchDataByReviews"],"sourceRoot":""}