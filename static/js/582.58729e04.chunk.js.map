{"version":3,"file":"static/js/582.58729e04.chunk.js","mappings":"wNAGaA,EAAYC,EAAAA,EAAAA,GAAH,gGAMTC,EAAYD,EAAAA,EAAAA,GAAH,gIAOTE,GAAOF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iH,SCKjB,EAjBgB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACXC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,SAACR,EAAD,WACE,SAACC,EAAD,CAAMQ,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFWD,EADN,KASjB,C,+KCdYK,EAAgB,WAC3B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEMC,EAAAA,EAAAA,MAFN,OAEbC,EAFa,OAGnBN,GAAU,SAAAX,GAAM,wBAAQA,IAAR,OAAmBiB,GAAnB,IAHG,gDAKnBC,QAAQC,IAAR,MALmB,yBAOnBN,GAAa,GAPM,4EAAH,qDAUpBE,GACD,GAAE,IAEI,CAAEf,OAAAA,EAAQY,UAAAA,EAClB,E,mBCnBYQ,EAAe,SAAChB,EAAIiB,GAC/B,OAAkCX,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOY,EAAP,KAAkBC,EAAlB,KACA,GAAkCb,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMU,EAAa,mCAAG,6GAEMH,EAAUjB,GAFhB,OAEZkB,EAFY,OAGlBC,EAAaD,GAHK,gDAKlBJ,QAAQC,IAAR,MALkB,yBAOlBN,GAAa,GAPK,4EAAH,qDAUnBW,GACD,GAAE,CAACpB,EAAIiB,IAED,CAAEC,UAAAA,EAAWV,UAAAA,EACrB,EAEDQ,EAAaK,WACVC,IAAAA,OAAAA,WAA6BA,IAAAA,KAAAA,Y,wBCpBnBC,EAAgB,WAC3B,OAA0BjB,EAAAA,EAAAA,UAAS,IAAnC,eAAOkB,EAAP,KAAcC,EAAd,KACA,GAA4BnB,EAAAA,EAAAA,WAAS,WAAO,IAAD,EACzC,iBAAOoB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBAA9C,QAA4D,EAC7D,IAFD,eAAOlC,EAAP,KAAeW,EAAf,KAGA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAwCsB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAvB,EAAAA,EAAAA,YAAU,WACRkB,OAAOC,aAAaK,QAAQ,SAAUR,KAAKS,UAAUvC,GACtD,GAAE,CAACA,KAEJc,EAAAA,EAAAA,YAAU,WACR,GAAKc,EAAL,CAGA,IAAMY,EAAU,mCAAG,oGAEf3B,GAAa,GAFE,UAGU4B,EAAAA,EAAAA,IAAgBb,GAH1B,OAIO,KADhBX,EAHS,QAIJyB,OACPC,EAAAA,OAAAA,QACE,gEAEFhC,GAAU,SAAAX,GAAM,wBAAQA,IAAR,OAAmBiB,GAAnB,IARL,gDAUfC,QAAQC,IAAR,MAVe,yBAYfkB,EAAgB,CAAEO,MAAOhB,IACzBf,GAAa,GAbE,4EAAH,qDAiBhB2B,GAlBC,CAmBF,GAAE,CAACZ,EAAOS,IAWX,MAAO,CAAEzB,UAAAA,EAAWZ,OAAAA,EAAQoC,aAAAA,EAAcS,SATzB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACdA,IAAelB,GACjBC,EAASiB,GACTnC,EAAU,KAEVkB,EAASiB,EAEZ,EAGF,C,mIChDYC,EAAenD,EAAAA,EAAAA,IAAH,4OAcZoD,GAAapD,EAAAA,EAAAA,GAAOqD,EAAAA,GAAPrD,CAAH,mLAUVsD,EAActD,EAAAA,EAAAA,MAAH,wCAIXuD,EAAcvD,EAAAA,EAAAA,MAAH,oVAiBXwD,EAAYxD,EAAAA,EAAAA,OAAH,gR,SCOtB,EA1CmB,SAAC,GAAkB,IAAD,EAAfyD,EAAe,EAAfA,SAYpB,OACE,SAACN,EAAD,WACE,SAAC,KAAD,CACEO,cAAe,CACbR,WAAU,UAAEhB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBAAzC,QAAuD,IAEnEmB,SAjBe,SAAAE,GACO,KAAtBA,EAAOT,WACTH,EAAAA,OAAAA,QAAe,4CAEfU,EAASE,GACTvB,OAAOC,aAAaK,QAClB,SACAR,KAAKS,UAAUiB,OAAOD,OAAOA,KAGlC,EAGG,UAME,UAACP,EAAD,YACE,SAACE,EAAD,WACE,SAAC,KAAD,CACEO,KAAK,aACLC,GAAIP,EACJQ,YAAY,2BACZC,aAAa,WAGjB,SAACR,EAAD,CAAWS,KAAK,SAAhB,UACE,SAAC,MAAD,CAAUC,MAAM,KAAKC,OAAO,eAMvC,E,8BCjCD,EAXsB,WACpB,OAAsDpC,EAAAA,EAAAA,MAA9Cf,EAAR,EAAQA,UAAWZ,EAAnB,EAAmBA,OAAQoC,EAA3B,EAA2BA,aAAcS,EAAzC,EAAyCA,SAEzC,OACE,gCACE,SAAC,EAAD,CAAWQ,SAAUR,IACpBjC,GAAawB,GAAe,SAAC4B,EAAA,EAAD,KAAa,SAACC,EAAA,EAAD,CAASjE,OAAQA,MAGhE,C,kMCZKkE,EAAM,mCAENlD,EAAc,mCAAG,4FACT,mDADS,kBAGImD,EAAAA,EAAAA,IAAA,UAFb,mDAEa,oBAA4BD,EAA5B,YAHJ,uBAGXE,EAHW,EAGXA,KAHW,kBAIZA,EAAKC,SAJO,gCAMnBnD,QAAQoD,MAAM,iDANK,yDAAH,qDAUd7B,EAAe,mCAAG,WAAMb,GAAN,+EACV,4CADU,kBAGGuC,EAAAA,EAAAA,IAAA,UAFb,4CAEa,oBACHD,EADG,kBACUtC,EADV,YAHH,uBAGZwC,EAHY,EAGZA,KAHY,kBAMbA,EAAKC,SANQ,gCAQpBnD,QAAQoD,MAAM,8CARM,yDAAH,sDAYfC,EAAa,mCAAG,WAAMnE,GAAN,+EACR,sCADQ,kBAIK+D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB/D,EAAnB,oBAAiC8D,IAJtC,uBAIVE,EAJU,EAIVA,KAJU,kBAKXA,GALW,gCAOlBlD,QAAQoD,MAAM,oDAPI,yDAAH,sDAWbE,EAAe,mCAAG,WAAMpE,GAAN,+EACV,sCADU,kBAIG+D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB/D,EAAnB,4BAAyC8D,IAJ5C,uBAIZE,EAJY,EAIZA,KAJY,kBAKbA,GALa,gCAOpBlD,QAAQoD,MAAM,oDAPM,yDAAH,sDAWfG,EAAkB,mCAAG,WAAMrE,GAAN,+EACb,sCADa,kBAIA+D,EAAAA,EAAAA,IAAA,UAHb,uCAGa,OAAmB/D,EAAnB,4BAAyC8D,IAJzC,uBAIfE,EAJe,EAIfA,KAJe,kBAKhBA,GALgB,gCAOvBlD,QAAQoD,MAAM,oDAPS,yDAAH,qD","sources":["components/Gallery/Gallery.styled.jsx","components/Gallery/Gallery.jsx","hooks/usefetchItems.jsx","hooks/useFetchMovie.jsx","hooks/useFetchQuery.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/MovieDataPage.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nexport const MovieItem = styled.li`\n  flex-basis: calc((100% - 40px) / 2);\n  font-size: 26px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const Link = styled(NavLink)`\n  color: black;\n\n  &:hover,\n  &:focus {\n    color: red;\n    font-weight: 700;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieList, MovieItem, Link } from './Gallery.styled';\n\nconst Gallery = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <MovieList>\n      {movies.map(({ id, title }) => (\n        <MovieItem key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n};\n\nGallery.propTypes = PropTypes.arrayOf(PropTypes.shape).isRequired;\n\nexport default Gallery;\n","import { fetchTrendData } from 'services/api';\nimport { useState, useEffect } from 'react';\n\nexport const useFetchItems = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const findTrendFilms = async () => {\n      try {\n        const moviesList = await fetchTrendData();\n        setMovies(movies => [...movies, ...moviesList]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findTrendFilms();\n  }, []);\n\n  return { movies, isLoading };\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const useFetchInfo = (id, fetchInfo) => {\n  const [movieInfo, setMovieInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const findMovieInfo = async () => {\n      try {\n        const movieInfo = await fetchInfo(id);\n        setMovieInfo(movieInfo);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findMovieInfo();\n  }, [id, fetchInfo]);\n\n  return { movieInfo, isLoading };\n};\n\nuseFetchInfo.propTypes =\n  (PropTypes.string.isRequired, PropTypes.func.isRequired);\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchData } from 'services/api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport const useFetchQuery = () => {\n  const [value, setValue] = useState('');\n  const [movies, setMovies] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('movies')) ?? [];\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    window.localStorage.setItem('movies', JSON.stringify(movies));\n  }, [movies]);\n\n  useEffect(() => {\n    if (!value) {\n      return;\n    }\n    const findMovies = async () => {\n      try {\n        setIsLoading(true);\n        const moviesList = await fetchSearchData(value);\n        moviesList.length === 0\n          ? Notify.failure(\n              'Sorry! There is no photo with this name. Try something else!'\n            )\n          : setMovies(movies => [...movies, ...moviesList]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setSearchParams({ query: value });\n        setIsLoading(false);\n      }\n    };\n\n    findMovies();\n  }, [value, setSearchParams]);\n\n  const addValue = ({ inputValue }) => {\n    if (inputValue !== value) {\n      setValue(inputValue);\n      setMovies([]);\n    } else {\n      setValue(inputValue);\n    }\n  };\n\n  return { isLoading, movies, searchParams, addValue };\n};\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const SearchbarBox = styled.div`\n  width: 100%;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  margin-bottom: 10px;\n  background-image: repeating-radial-gradient(\n    circle,\n    black,\n    red 20px,\n    black 30px,\n    red 20px\n  );\n`;\n\nexport const FormStyles = styled(Form)`\n  position: relative;\n  width: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const LabelStyles = styled.label`\n  width: 100%;\n`;\n\nexport const InputStyles = styled.input`\n  width: 100%;\n  height: 30px;\n  padding-left: 40px;\n  padding-right: 10px;\n  background-color: #fff;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border-color: rgba(255, 0, 0, 0.7);\n  }\n`;\n\nexport const ButtonBox = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: block;\n  padding-top: 5px;\n  width: 30px;\n  height: 100%;\n  background-color: white;\n  border: transparent;\n\n  &:hover,\n  &:focus {\n    background-color: rgba(255, 0, 0, 0.7);\n  }\n`;\n","import { BsSearch } from 'react-icons/bs';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik, Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport {\n  SearchbarBox,\n  FormStyles,\n  InputStyles,\n  LabelStyles,\n  ButtonBox,\n} from './SearchForm.styled';\n\nconst SearchForm = ({ onSubmit }) => {\n  const hendleSubmit = values => {\n    if (values.inputValue === '') {\n      Notify.failure('Please, enter something for me to find!');\n    } else {\n      onSubmit(values);\n      window.localStorage.setItem(\n        'values',\n        JSON.stringify(Object.values(values))\n      );\n    }\n  };\n  return (\n    <SearchbarBox>\n      <Formik\n        initialValues={{\n          inputValue: JSON.parse(window.localStorage.getItem('values')) ?? '',\n        }}\n        onSubmit={hendleSubmit}\n      >\n        <FormStyles>\n          <LabelStyles>\n            <Field\n              name=\"inputValue\"\n              as={InputStyles}\n              placeholder=\"Search images and photos\"\n              autocomplete=\"off\"\n            />\n          </LabelStyles>\n          <ButtonBox type=\"submit\">\n            <BsSearch width=\"20\" height=\"20\" />\n          </ButtonBox>\n        </FormStyles>\n      </Formik>\n    </SearchbarBox>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import SeachForm from 'components/SearchForm';\nimport Gallery from 'components/Gallery';\nimport Loader from 'components/Loader';\nimport { useFetchQuery } from 'hooks';\n\nconst MovieDataPage = () => {\n  const { isLoading, movies, searchParams, addValue } = useFetchQuery();\n\n  return (\n    <section>\n      <SeachForm onSubmit={addValue} />\n      {isLoading && searchParams ? <Loader /> : <Gallery movies={movies} />}\n    </section>\n  );\n};\n\nexport default MovieDataPage;\n","import axios from 'axios';\n\nconst KEY = 'fd7341fdf0f2e94a335192ece09ea376';\n\nconst fetchTrendData = async () => {\n  const url = 'https://api.themoviedb.org/3/trending/movie/week';\n  try {\n    const { data } = await axios.get(`${url}?api_key=${KEY}&page=1`);\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong! Can not get full trends' + error);\n  }\n};\n\nconst fetchSearchData = async value => {\n  const url = 'https://api.themoviedb.org/3/search/movie';\n  try {\n    const { data } = await axios.get(\n      `${url}?api_key=${KEY}&query=${value}&page=1`\n    );\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong! Can not search films' + error);\n  }\n};\n\nconst fetchDataById = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nconst fetchDataByCast = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}/credits?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nconst fetchDataByReviews = async id => {\n  const url = 'https://api.themoviedb.org/3/movie/';\n\n  try {\n    const { data } = await axios.get(`${url}${id}/reviews?api_key=${KEY}`);\n    return data;\n  } catch (error) {\n    console.error('Something wrong! Can not search films by ID' + error);\n  }\n};\n\nexport {\n  fetchTrendData,\n  fetchSearchData,\n  fetchDataById,\n  fetchDataByCast,\n  fetchDataByReviews,\n};\n"],"names":["MovieList","styled","MovieItem","Link","NavLink","movies","location","useLocation","map","id","title","to","state","from","useFetchItems","useState","setMovies","isLoading","setIsLoading","useEffect","findTrendFilms","fetchTrendData","moviesList","console","log","useFetchInfo","fetchInfo","movieInfo","setMovieInfo","findMovieInfo","propTypes","PropTypes","useFetchQuery","value","setValue","JSON","parse","window","localStorage","getItem","useSearchParams","searchParams","setSearchParams","setItem","stringify","findMovies","fetchSearchData","length","Notify","query","addValue","inputValue","SearchbarBox","FormStyles","Form","LabelStyles","InputStyles","ButtonBox","onSubmit","initialValues","values","Object","name","as","placeholder","autocomplete","type","width","height","Loader","Gallery","KEY","axios","data","results","error","fetchDataById","fetchDataByCast","fetchDataByReviews"],"sourceRoot":""}